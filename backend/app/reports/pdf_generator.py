# app/reports/pdf_generator.py
from reportlab.lib.pagesizes import letter, A4
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.platypus import PageBreak, Image
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_JUSTIFY
from datetime import datetime
import os
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
from io import BytesIO
import base64

class WebSecurityReportGenerator:
    """Generador de reportes PDF profesionales para escaneos de seguridad web"""
    
    def __init__(self):
        self.styles = getSampleStyleSheet()
        self.setup_custom_styles()
    
    def setup_custom_styles(self):
        """Configurar estilos personalizados para el reporte"""
        
        # T√≠tulo principal
        self.styles.add(ParagraphStyle(
            name='CustomTitle',
            parent=self.styles['Heading1'],
            fontSize=24,
            spaceAfter=30,
            textColor=colors.HexColor('#1f2937'),
            alignment=TA_CENTER,
            fontName='Helvetica-Bold'
        ))
        
        # Subt√≠tulo
        self.styles.add(ParagraphStyle(
            name='CustomSubtitle',
            parent=self.styles['Heading2'],
            fontSize=16,
            spaceAfter=20,
            textColor=colors.HexColor('#374151'),
            fontName='Helvetica-Bold'
        ))
        
        # Texto de riesgo cr√≠tico
        self.styles.add(ParagraphStyle(
            name='CriticalRisk',
            parent=self.styles['Normal'],
            fontSize=14,
            textColor=colors.red,
            fontName='Helvetica-Bold',
            alignment=TA_CENTER,
            spaceAfter=10
        ))
        
        # Texto de riesgo alto
        self.styles.add(ParagraphStyle(
            name='HighRisk',
            parent=self.styles['Normal'],
            fontSize=14,
            textColor=colors.HexColor('#f59e0b'),
            fontName='Helvetica-Bold',
            alignment=TA_CENTER,
            spaceAfter=10
        ))
        
        # Texto de riesgo medio
        self.styles.add(ParagraphStyle(
            name='MediumRisk',
            parent=self.styles['Normal'],
            fontSize=14,
            textColor=colors.HexColor('#10b981'),
            fontName='Helvetica-Bold',
            alignment=TA_CENTER,
            spaceAfter=10
        ))
        
        # Texto normal mejorado
        self.styles.add(ParagraphStyle(
            name='CustomNormal',
            parent=self.styles['Normal'],
            fontSize=11,
            spaceAfter=6,
            alignment=TA_JUSTIFY,
            fontName='Helvetica'
        ))

    def generate_report(self, scan_data, output_path=None):
        """Generar reporte PDF completo"""
        
        if not output_path:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            output_path = f"reports/security_report_{scan_data['scan_id']}_{timestamp}.pdf"
        
        # Crear directorio si no existe
        os.makedirs(os.path.dirname(output_path), exist_ok=True)
        
        # Crear documento
        doc = SimpleDocTemplate(output_path, pagesize=A4,
                              rightMargin=72, leftMargin=72,
                              topMargin=72, bottomMargin=18)
        
        # Construir contenido
        story = []
        
        # P√°gina de portada
        story.extend(self._create_cover_page(scan_data))
        story.append(PageBreak())
        
        # Resumen ejecutivo
        story.extend(self._create_executive_summary(scan_data))
        story.append(PageBreak())
        
        # Detalles de vulnerabilidades
        story.extend(self._create_vulnerability_details(scan_data))
        story.append(PageBreak())
        
        # Recomendaciones
        story.extend(self._create_recommendations(scan_data))
        story.append(PageBreak())
        
        # Anexos t√©cnicos
        story.extend(self._create_technical_appendix(scan_data))
        
        # Generar PDF
        doc.build(story)
        return output_path

    def _create_cover_page(self, scan_data):
        """Crear p√°gina de portada"""
        story = []
        
        # Logo/T√≠tulo de empresa
        story.append(Paragraph("WebSecure Pro", self.styles['CustomTitle']))
        story.append(Spacer(1, 20))
        
        # T√≠tulo del reporte
        story.append(Paragraph("REPORTE DE SEGURIDAD WEB", self.styles['CustomTitle']))
        story.append(Spacer(1, 30))
        
        # Informaci√≥n del sitio
        site_info = f"""
        <b>Sitio web analizado:</b> {scan_data['url']}<br/>
        <b>Fecha de escaneo:</b> {datetime.fromisoformat(scan_data['started_at'].replace('Z', '+00:00')).strftime('%d de %B, %Y')}<br/>
        <b>ID de escaneo:</b> {scan_data['scan_id']}<br/>
        <b>Duraci√≥n del escaneo:</b> {scan_data['duration_seconds']} segundos
        """
        story.append(Paragraph(site_info, self.styles['CustomNormal']))
        story.append(Spacer(1, 40))
        
        # Nivel de riesgo prominente
        risk_level = scan_data.get('risk_level', 'UNKNOWN')
        risk_score = scan_data.get('risk_score', 0)
        
        if risk_level == 'CRITICAL':
            risk_style = 'CriticalRisk'
            risk_text = f"üö® RIESGO CR√çTICO - Puntuaci√≥n: {risk_score}/10"
        elif risk_level == 'HIGH':
            risk_style = 'HighRisk' 
            risk_text = f"‚ö†Ô∏è RIESGO ALTO - Puntuaci√≥n: {risk_score}/10"
        elif risk_level == 'MEDIUM':
            risk_style = 'MediumRisk'
            risk_text = f"‚ö° RIESGO MEDIO - Puntuaci√≥n: {risk_score}/10"
        else:
            risk_style = 'MediumRisk'
            risk_text = f"‚úÖ RIESGO BAJO - Puntuaci√≥n: {risk_score}/10"
        
        story.append(Paragraph(risk_text, self.styles[risk_style]))
        story.append(Spacer(1, 30))
        
        # Resumen de vulnerabilidades
        total_vulns = len(scan_data.get('vulnerabilities', []))
        summary_text = f"""
        <b>RESUMEN DE HALLAZGOS:</b><br/>
        ‚Ä¢ Total de vulnerabilidades encontradas: <b>{total_vulns}</b><br/>
        ‚Ä¢ Tipos de escaneo realizados: {', '.join(scan_data['scan_types'])}<br/>
        ‚Ä¢ Estado del escaneo: <b>{scan_data['status'].upper()}</b>
        """
        story.append(Paragraph(summary_text, self.styles['CustomNormal']))
        
        return story

    def _create_executive_summary(self, scan_data):
        """Crear resumen ejecutivo"""
        story = []
        
        story.append(Paragraph("RESUMEN EJECUTIVO", self.styles['CustomSubtitle']))
        
        # Contexto del escaneo
        context = f"""
        Este reporte presenta los resultados del an√°lisis de seguridad web realizado en {scan_data['url']} 
        el {datetime.fromisoformat(scan_data['started_at'].replace('Z', '+00:00')).strftime('%d de %B, %Y')}. 
        El escaneo se realiz√≥ utilizando t√©cnicas automatizadas de detecci√≥n de vulnerabilidades, 
        enfoc√°ndose en las amenazas m√°s comunes seg√∫n el OWASP Top 10.
        """
        story.append(Paragraph(context, self.styles['CustomNormal']))
        story.append(Spacer(1, 20))
        
        # Hallazgos principales
        vulnerabilities = scan_data.get('vulnerabilities', [])
        
        if vulnerabilities:
            story.append(Paragraph("HALLAZGOS PRINCIPALES:", self.styles['CustomSubtitle']))
            
            # Contar por severidad
            critical_count = len([v for v in vulnerabilities if v['severity'] == 'CRITICAL'])
            high_count = len([v for v in vulnerabilities if v['severity'] == 'HIGH'])
            medium_count = len([v for v in vulnerabilities if v['severity'] == 'MEDIUM'])
            low_count = len([v for v in vulnerabilities if v['severity'] == 'LOW'])
            
            findings_summary = f"""
            ‚Ä¢ <b>{critical_count}</b> vulnerabilidades CR√çTICAS que requieren atenci√≥n inmediata<br/>
            ‚Ä¢ <b>{high_count}</b> vulnerabilidades de riesgo ALTO<br/>
            ‚Ä¢ <b>{medium_count}</b> vulnerabilidades de riesgo MEDIO<br/>
            ‚Ä¢ <b>{low_count}</b> vulnerabilidades de riesgo BAJO
            """
            story.append(Paragraph(findings_summary, self.styles['CustomNormal']))
            story.append(Spacer(1, 20))
            
            # Recomendaci√≥n ejecutiva
            story.append(Paragraph("RECOMENDACI√ìN EJECUTIVA:", self.styles['CustomSubtitle']))
            
            risk_level = scan_data.get('risk_level', 'UNKNOWN')
            recommendations = {
                'CRITICAL': """
                <b>ACCI√ìN INMEDIATA REQUERIDA:</b> Se han identificado vulnerabilidades cr√≠ticas que exponen 
                el sitio web a ataques severos. Se recomienda suspender operaciones no esenciales hasta 
                que se implementen las correcciones necesarias.
                """,
                'HIGH': """
                <b>ATENCI√ìN PRIORITARIA:</b> Las vulnerabilidades identificadas representan un riesgo 
                significativo para la seguridad. Se recomienda implementar las correcciones en un 
                plazo no mayor a 48-72 horas.
                """,
                'MEDIUM': """
                <b>REVISI√ìN PROGRAMADA:</b> Se han identificado vulnerabilidades que deben ser abordadas 
                en el pr√≥ximo ciclo de mantenimiento. Aunque no representan un riesgo inmediato, 
                requieren atenci√≥n en las pr√≥ximas semanas.
                """,
                'LOW': """
                <b>MANTENIMIENTO RUTINARIO:</b> El sitio web presenta un nivel de seguridad aceptable 
                con oportunidades menores de mejora. Se recomienda implementar las sugerencias como 
                parte del mantenimiento regular.
                """
            }
            
            exec_recommendation = recommendations.get(risk_level, 
                "Se recomienda revisar los hallazgos detallados y implementar las correcciones sugeridas.")
            
            story.append(Paragraph(exec_recommendation, self.styles['CustomNormal']))
        else:
            story.append(Paragraph("‚úÖ No se encontraron vulnerabilidades cr√≠ticas en este escaneo.", 
                                 self.styles['CustomNormal']))
        
        return story

    def _create_vulnerability_details(self, scan_data):
        """Crear secci√≥n de detalles de vulnerabilidades"""
        story = []
        
        story.append(Paragraph("DETALLES DE VULNERABILIDADES", self.styles['CustomSubtitle']))
        
        vulnerabilities = scan_data.get('vulnerabilities', [])
        
        if not vulnerabilities:
            story.append(Paragraph("No se encontraron vulnerabilidades en este escaneo.", 
                                 self.styles['CustomNormal']))
            return story
        
        # Agrupar por tipo
        vuln_by_type = {}
        for vuln in vulnerabilities:
            vuln_type = vuln.get('type', 'Unknown')
            if vuln_type not in vuln_by_type:
                vuln_by_type[vuln_type] = []
            vuln_by_type[vuln_type].append(vuln)
        
        for vuln_type, vuln_list in vuln_by_type.items():
            # T√≠tulo del tipo de vulnerabilidad
            story.append(Paragraph(f"{vuln_type.upper()}", self.styles['CustomSubtitle']))
            
            for i, vuln in enumerate(vuln_list, 1):
                # Crear tabla con detalles de la vulnerabilidad
                vuln_data = [
                    ['Campo', 'Valor'],
                    ['Severidad', vuln.get('severity', 'N/A')],
                    ['Ubicaci√≥n', vuln.get('location', 'N/A')],
                    ['Descripci√≥n', vuln.get('description', 'N/A')],
                    ['Recomendaci√≥n', vuln.get('recommendation', 'N/A')]
                ]
                
                # Agregar evidencia si existe
                if vuln.get('evidence'):
                    vuln_data.append(['Evidencia', vuln.get('evidence')])
                
                vuln_table = Table(vuln_data, colWidths=[2*inch, 4*inch])
                vuln_table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (1, 0), colors.HexColor('#f3f4f6')),
                    ('TEXTCOLOR', (0, 0), (1, 0), colors.black),
                    ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                    ('FONTNAME', (0, 0), (1, 0), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, -1), 10),
                    ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.HexColor('#f9fafb')]),
                    ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#e5e7eb')),
                    ('VALIGN', (0, 0), (-1, -1), 'TOP'),
                ]))
                
                story.append(vuln_table)
                story.append(Spacer(1, 20))
        
        return story

    def _create_recommendations(self, scan_data):
        """Crear secci√≥n de recomendaciones"""
        story = []
        
        story.append(Paragraph("RECOMENDACIONES DE SEGURIDAD", self.styles['CustomSubtitle']))
        
        vulnerabilities = scan_data.get('vulnerabilities', [])
        
        # Recomendaciones generales
        general_recommendations = [
            "Implementar un programa regular de escaneo de vulnerabilidades",
            "Establecer un proceso de gesti√≥n de parches y actualizaciones",
            "Configurar monitoreo continuo de seguridad",
            "Realizar pruebas de penetraci√≥n peri√≥dicas",
            "Implementar un Web Application Firewall (WAF)"
        ]
        
        # Recomendaciones espec√≠ficas basadas en vulnerabilidades encontradas
        specific_recommendations = []
        
        vuln_types = [vuln.get('type', '') for vuln in vulnerabilities]
        
        if any('XSS' in vtype for vtype in vuln_types):
            specific_recommendations.extend([
                "Implementar Content Security Policy (CSP) headers",
                "Sanitizar todas las entradas de usuario",
                "Usar funciones de escape apropiadas para el contexto HTML",
                "Validar y filtrar datos de entrada en el servidor"
            ])
        
        if any('SQL Injection' in vtype for vtype in vuln_types):
            specific_recommendations.extend([
                "Usar prepared statements para todas las consultas SQL",
                "Implementar validaci√≥n estricta de par√°metros de entrada",
                "Aplicar principio de menor privilegio en cuentas de base de datos",
                "Considerar el uso de un ORM (Object-Relational Mapping)"
            ])
        
        # Combinar recomendaciones
        all_recommendations = specific_recommendations + general_recommendations
        
        # Crear lista numerada
        for i, rec in enumerate(all_recommendations[:10], 1):  # Limitar a 10 recomendaciones
            story.append(Paragraph(f"{i}. {rec}", self.styles['CustomNormal']))
            story.append(Spacer(1, 6))
        
        # Pr√≥ximos pasos
        story.append(Spacer(1, 20))
        story.append(Paragraph("PR√ìXIMOS PASOS SUGERIDOS:", self.styles['CustomSubtitle']))
        
        next_steps = """
        1. <b>Corto plazo (1-7 d√≠as):</b> Abordar vulnerabilidades cr√≠ticas y de alto riesgo<br/>
        2. <b>Mediano plazo (1-4 semanas):</b> Implementar medidas preventivas y mejoras de seguridad<br/>
        3. <b>Largo plazo (1-3 meses):</b> Establecer programa de seguridad continua y monitoreo<br/>
        4. <b>Seguimiento:</b> Realizar nuevo escaneo despu√©s de implementar correcciones
        """
        story.append(Paragraph(next_steps, self.styles['CustomNormal']))
        
        return story

    def _create_technical_appendix(self, scan_data):
        """Crear anexo t√©cnico"""
        story = []
        
        story.append(Paragraph("ANEXO T√âCNICO", self.styles['CustomSubtitle']))
        
        # Informaci√≥n t√©cnica del escaneo
        tech_info = f"""
        <b>Metodolog√≠a de escaneo:</b><br/>
        ‚Ä¢ Tipos de escaneo: {', '.join(scan_data['scan_types'])}<br/>
        ‚Ä¢ Duraci√≥n total: {scan_data['duration_seconds']} segundos<br/>
        ‚Ä¢ Fecha y hora de inicio: {scan_data['started_at']}<br/>
        ‚Ä¢ Fecha y hora de finalizaci√≥n: {scan_data['completed_at']}<br/><br/>
        
        <b>Herramientas utilizadas:</b><br/>
        ‚Ä¢ WebSecure Pro Scanner v1.0<br/>
        ‚Ä¢ M√≥dulos: XSS Scanner, SQL Injection Scanner<br/>
        ‚Ä¢ Base de datos de vulnerabilidades: OWASP Top 10 2021<br/><br/>
        
        <b>Cobertura del escaneo:</b><br/>
        ‚Ä¢ An√°lisis de formularios web<br/>
        ‚Ä¢ Pruebas de par√°metros GET y POST<br/>
        ‚Ä¢ Detecci√≥n de patrones de vulnerabilidad<br/>
        ‚Ä¢ An√°lisis de respuestas del servidor
        """
        
        story.append(Paragraph(tech_info, self.styles['CustomNormal']))
        story.append(Spacer(1, 20))
        
        # Detalles t√©cnicos de los resultados
        results = scan_data.get('results', {})
        
        for scan_type, result_data in results.items():
            story.append(Paragraph(f"DETALLES - {scan_type.upper()}", self.styles['CustomSubtitle']))
            
            if isinstance(result_data, dict):
                tech_details = f"""
                ‚Ä¢ Tiempo de escaneo: {result_data.get('scan_time', 'N/A')} segundos<br/>
                ‚Ä¢ Formularios encontrados: {result_data.get('forms_found', 'N/A')}<br/>
                ‚Ä¢ Par√°metros probados: {result_data.get('params_tested', 'N/A')}<br/>
                ‚Ä¢ Vulnerabilidades detectadas: {len(result_data.get('vulnerabilities', []))}<br/>
                ‚Ä¢ Estado: {'Vulnerable' if result_data.get('vulnerable') else 'Seguro'}
                """
                story.append(Paragraph(tech_details, self.styles['CustomNormal']))
            
            story.append(Spacer(1, 15))
        
        # Disclaimer
        story.append(Spacer(1, 30))
        story.append(Paragraph("DISCLAIMER", self.styles['CustomSubtitle']))
        disclaimer = """
        Este reporte ha sido generado mediante herramientas automatizadas de escaneo de vulnerabilidades. 
        Los resultados deben ser verificados por personal t√©cnico calificado antes de implementar cualquier 
        correcci√≥n. WebSecure Pro no se hace responsable por da√±os que puedan resultar del uso de esta informaci√≥n. 
        Se recomienda realizar pruebas adicionales en un ambiente controlado antes de aplicar cambios en producci√≥n.
        """
        story.append(Paragraph(disclaimer, self.styles['CustomNormal']))
        
        return story

# Funci√≥n helper para usar desde la API
def generate_pdf_report(scan_data, output_dir="reports"):
    """Funci√≥n helper para generar reporte PDF desde la API"""
    generator = WebSecurityReportGenerator()
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"security_report_{scan_data['scan_id'][:8]}_{timestamp}.pdf"
    output_path = os.path.join(output_dir, filename)
    
    return generator.generate_report(scan_data, output_path)
